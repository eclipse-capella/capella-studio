--- RCPTT testcase ---
Format-Version: 1.0
Context-Type: org.eclipse.rcptt.ctx.ecl
Element-Name: Generation Lib
Element-Type: context
Element-Version: 2.0
Id: _KOH-MKJ5EeWqlNQu-Q0L2A
Save-Time: 11/12/20, 10:20 AM

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998
Content-Type: text/ecl
Entry-Name: .ecl.context

proc generateViewpointWithSelection [val vpdescFilePath] [val generationName]{
	// Right click on the vpdesc file and click on the menu action
	get-view "Project Explorer" | get-tree | select $vpdescFilePath | get-menu "Viewpoint DSL/Generate viewpoint with selection" | click
	
	// Desable all generations and enable only the choosen one 
	with [get-window "User Extension Selection"] {
	    get-button "Unselect all" | uncheck
	    get-table | get-item $generationName -column Name | check
	    get-button Finish | click
	}
}

proc "get-os" {
	invoke-static -pluginId "org.eclipse.core.runtime" -className "org.eclipse.core.runtime.Platform"
		-methodName getOS
}

/** Get the system temporary folder **/
//proc "getTempFolderIn" [val os] {
//	switch $os
//		[case "win32" {
//				concat "file:/" [ get-file [ get-java-property "java.io.tmpdir"] 
//							| get uri 
//							| invoke replace "\\" "/" 
//							| invoke replace " " "%20" 
//					]
//			}
//		]
//		[case "linux" {
//				concat "/" "tmp"
//			}
//		]
//		-default {
//			"\." //current folder used as tmp
//		}
//}

proc "getTempFolder" {
	uri-from-path [ get-java-property "java.io.tmpdir" ]
}

/** Get the today date with the given format **/
proc "getDate" [val format "yyyyMMdd"] {
	get-time | format-time -format $format
}

proc refreshAllGeneratedProjects {
	with [get-view "Project Explorer"] {
	    get-button "Collapse All  (M1+M2+Numpad_Divide)" | click
	    with [get-tree] {
		    select "org.polarsys.capella.vp.qualityassessment"
		    key-type "M1+a"
//	        select "org.polarsys.capella.vp.qualityassessment.af" "org.polarsys.capella.vp.qualityassessment.af.feature" "org.polarsys.capella.vp.qualityassessment.contextual.explorer" "org.polarsys.capella.vp.qualityassessment.design" "org.polarsys.capella.vp.qualityassessment.fc" "org.polarsys.capella.vp.qualityassessment.feature" "org.polarsys.capella.vp.qualityassessment.model" "org.polarsys.capella.vp.qualityassessment.model.edit" "org.polarsys.capella.vp.qualityassessment.releng" "org.polarsys.capella.vp.qualityassessment.representation.feature" "org.polarsys.capella.vp.qualityassessment.rules.analysis" "org.polarsys.capella.vp.qualityassessment.rules.computation" "org.polarsys.capella.vp.qualityassessment.rules.feature" "org.polarsys.capella.vp.qualityassessment.rules.generation" "org.polarsys.capella.vp.qualityassessment.rules.transformation" "org.polarsys.capella.vp.qualityassessment.rules.validation" "org.polarsys.capella.vp.qualityassessment.ui" "org.polarsys.capella.vp.qualityassessment.vpdsl"
	        get-menu Refresh | click
	    }
	}
}



/** Parse a folder and look for a given folder/file **/
/** The action values are: 1= Check existence; 2= Delete; 3- echo full name; 4- echo full path. **/
proc "lookForDropinsFolder" [val contextFolderPath] [val parentFilter] [val folderFilter] [val action 1] {
	get-file [ $contextFolderPath ] | get children | foreach [val item] {
	   if [$item | get name | contains [ $parentFilter ] ]
	   {
	   		get-file [$item | get uri] | get children | foreach [val sitem] 
	   		{
	   			if [ $sitem | get name | contains [ $folderFilter ] ]
	   			{
	   				$action | switch 
		   						[case 1 {
									echo "Found"
								}] 
								[case 2 {
									$item | get uri | delete-file
								}] 
								[case 3 {
									$sitem | get name | echo
								}] 
								[case 4 {
									$sitem | get uri | echo
								}]
	   			}
			}
	   }
	}        
}

// Prepare model to validation
proc "OpenModel" [val fileFQN] [val fileName]{
	// 1- Close the current editor if it is open
	try -catch {} -command {
		get-editor $fileName | close
	}
	
	// 2- Open the editor
	try -command {
		get-view "Project Explorer" | get-tree | select $fileFQN | double-click 
		get-editor $fileName | get-tree | emit
	}
}

// Prepare model to validation
proc "OpenAndValidateModel" [val fileFQN] [val fileName] [val selection ""]{
	// 1- Close the current editor if it is open
	try -catch {} -command {
		get-editor $fileName | close
	}
	
	// 2- Open the editor
	try -command {
		get-view "Project Explorer" | get-tree | select $fileFQN | double-click 
		if [ $selection | not-eq ""]{
			get-editor $fileName| get-tree | get-item $selection | click
		}
		
		with [get-editor $fileName | get-tree] {
			get-menu Validate | click
		}
		get-window "Validation Information" | get-button OK | click
	}
	-catch {
		//log ["Your model " $fileFQN " is NOT VALID"]
		get-window "Validation Problems" | get-button OK | click
	}
}
------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998--
